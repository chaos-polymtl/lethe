===============================================================================
3D Mixer with pitched-blade turbine impeller using Nitsche immersed boundary
===============================================================================

Simulation of mixing in stirred-tanks is one important industrial application which is often simulated with Lethe. Agitated vessels are widely applied in chemical engineering as product homogenizers, heat and mass transfer enhancers, and surface area maximizers in solid-fluid processes. Batch and Continuous Stirred Tank Reactors (CSTR), for example, are among the most often reactor models applied in chemical industries that can be simulated through computational fluid dynamics.

This example illustrates how the transient flow in a stirred-tank can be simulated by Lethe using the Nitsche immersed boundary formulation.

Features
----------------------------------
- Solvers: ``gls_nitsche_navier_stokes_33``
- Transient problem
- Rotating complex solid modeled with Nitsche immersed boundary
- Calculation of the average velocity


Location of the examples
------------------------
``/examples/incompressible_flow/3d_nitsche_mixer_with_pbt_impeller/mixer.prm``


Description of the case
-----------------------

We simulate the flow generated by a pitched blade turbine (PBT) in a stirred tank. The PBT is an axial impeller, which generates a flow pattern that amplifies axial circulation within the vessel (in opposition to radial impellers, e.g. Rushton turbines) [1].

The setup that we wish to simulate is schematized in the following figure:

  .. image:: images/scheme_tank.png
   :alt: The geometry and boundary conditions
   :align: center
   :name: geometry
   :height: 12cm



It consists of a :math:`D` diameter PBT in a :math:`T` diameter vessel. The vessel is at a clearance :math:`C` from the bottom. For generalization purposes, we will consider :math:`T=1` and make the problem dimensionless by considering all other dimensions as a ratio of :math:`T`. The diameter of the impeller is :math:`D/3` and the clearance is :math:`D/4`. The Reynolds number of the flow will be controlled through the viscosity and the angular velocity of the impeller.

The PBT is rotating at a constant velocity. No-slip boundary conditions are applied on the lateral and bottom walls of the vessel. On the top surface, a slip boundary condition is applied to mimic the liquid's free surface. This boundary condition is debatable. A do-nothing boundary condition could be used since free surfaces have constant pressure, but the slip boundary condition is generally significantly more numerically robust.

For this configuration, the Reynolds number is defined as:

  .. math::
    Re = \frac{ND^2}{\nu}

where :math:`N` is the angular velocity in Rotation Per Second (RPS) and :math:`\nu` is the kinematic viscosity. We investigate this case at a Reynolds number of 300 for the flow reaches a pseudo steady-state. However, this example can easily be extended to higher Reynolds number values by lowering the kinematic viscosity. It will be necessary to increase the mesh resolution for the solution to be meaningfully accurate.


Parameter file
--------------

Except for the Nitsche immersed boundary, all other sections of the parameter file in the present case have been explained in previous examples. However, the important sections are briefly explained for completeness.

Simulation control
~~~~~~~~~~~~~~~~~~~

.. code-block:: text

    subsection simulation control
      set method                  = bdf2
      set output name             = mixer
      set output path             = ./output/
      set output frequency        = 2
      set time end                = 5
      set time step               = 0.02
      set output boundaries       = true
    end

Since the flow generated by the agitator is naturally transient, we use a second-order ``bdf2`` time-stepping method. We simulate the flow for a total of 5 seconds. We set ``output boundaries = true`` to generate an auxiliary file that highlights the equipment walls by hiding the cells of the mesh. This allows for a clearer visualization of the mixing setup.

Physical properties
~~~~~~~~~~~~~~~~~~~

.. code-block:: text

  subsection physical properties
    subsection fluid 0
      set kinematic viscosity            = 0.001
    end
  end

The kinematic viscosity is set to :math:`0.001`. This, combined with the angular velocity of 1 RPS and the diameter of the impeller of 0.3, will allow us to simulate the vessel at :math:`Re=300`.


Mesh
~~~~~

The ``mesh`` subsection specifies the computational grid:

.. code-block:: text

  subsection mesh
      set type                 = dealii
      set grid type            = subdivided_cylinder
      set grid arguments       = 2:0.5:0.5
      set initial refinement   = 3
  end

Because we use an immersed boundary approach, we only need to mesh the vessel without considering the impeller. This greatly simplifies the meshing process. The mesh can be generated straightforwardly using the deal.II mesh generator for a subdivided cylinder. We set the half-height and the radius of the vessel to be :math:`0.5`. This will generate a vessel in which the axis of the impeller will be along the :math:`x` coordinate. The bottom of the vessel will be on the :math:`x=-0.5` plane. This is not really intuitive, but this is a consequence of some of the inherent limitations of the mesh generators. We refer to the documentation of the deal.ii `GridGenerator <https://www.dealii.org/current/doxygen/deal.II/namespaceGridGenerator.html>`_ for a detailed explanation of the mesh generators.


Boundary conditions
~~~~~~~~~~~~~~~~~~~

The ``boundary conditions`` subsection establishes the constraints on different parts of the domain:

.. code-block:: text

    subsection boundary conditions
    set number                  = 3
        subsection bc 0
            set id                = 0
            set type              = noslip
        end
        subsection bc 1
            set id                = 1
            set type              = noslip
        end
        subsection bc 2
            set id                = 2
            set type              = slip
        end
    end


Three different boundary conditions are considered. On the lateral walls (``id=0``) and the bottom wall (``id=1``), a no-slip boundary condition applies whereas a slip boundary condition is imposed on the free surface at the top of the vessel (``id=2``). The boundary conditions are described in the :doc:`../../../parameters/cfd/boundary_conditions_cfd` section of the documentation.

Nitsche immersed boundary parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This subsection is used to insert the immersed geometry and control its motion.


.. code-block:: text

  set number of solids = 1
	set verbosity 			 = verbose

  subsection nitsche solid 0
	  subsection mesh
      		set type                 = gmsh
      		set file name            = pbt.msh
          set simplex = true
	  end
    subsection solid velocity
	    set Function expression = 0 ; 1*2*3.1416*z ; -1*2*3.1416*y
    end

   	set beta 			= 10
    set enable particles motion		= true
    set particles sub iterations      = 10
    set calculate torque on solid = true
  end

First, we specify the number of immersed solid objects. In our case, since we only have the PBT, we set ``number of solids=1``.  Setting ``verbosity = true`` enables the output of the solid object post-processing in the terminal.

For each Nitsche solid, multiple parameters have to be provided. First, the ``mesh`` subsection controls the mesh used for the Nitsche IB, working as a regular ``mesh`` subsection. In the present case, we import a GMSH mesh of the PBT made using simplices (tetrahedra). Hence, we set ``simplex = true``.

.. note::
  
  The Nitsche IB method works by forcing the fluid at the location of the gauss points of the solid triangulation in order to apply the no-slip boundary condition within the solid object. Consequently, the solid mesh should have a characteristic size that is of the same order as that used for the fluid dynamics problem. Using a finer mesh will not cause any problem, but will increase the computational cost without benefits.


We specify the ``solid velocity`` using a user-defined function. In the present case, the specified velocity induces a rotation around the :math:`x` axis of the meshes, centered at :math:`(0,0,0)`. This corresponds to the location of the center of our PBT in the accompanying GMSH mesh.

The parameter ``beta`` controls the intensity of the Nitsche method application in the fluid region. Higher values of ``beta`` lead to stiffer problems but prevent the fluid from penetrating the solid. For flows with Reynolds numbers larger than one, we found that setting ``beta`` between 10 and 1000 leads to satisfactory results. For more viscous flows, higher values of ``beta`` should be used to compensate for the larger shear stresses acting on the immersed solid.

Nitsche method can be used with both static and dynamic immersed solid. When the velocity imposed on the solid leads to a motion of the solid, we must set ``enable particles motion=true`` . This option should only be set to true on the moving solids since it adds a non-negligible cost to the simulations. To ensure that particles are always located efficiently as they move through the cell, we set ``particles sub iterations = 10``. This enables particle displacing using 10 sub-steps, thus facilitating the detection of the cells in which they lie. Generally, it is a good practice to have sufficient particles sub iterations so as to ensure that particles do not move more than half a cell during a particle sub iteration.


Post-processing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It is often desirable to obtain the time-averaged velocity field when simulating a transient flow. This is achieved through the post-processing section. The averaging period is started after the flows start to stabilize and reach their pseudo steady-state. In this case, we assume it happens after two seconds. This choice is error-prone, but this can be mitigated by increasing the duration of simulations and using a longer averaging interval.

.. code-block:: text

  subsection post-processing
     set calculate average velocities = true
     set initial time = 2
  end

Non-linear solver parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Since this is a transient problem, it is not highly non-linear except for the first few iterations. Thus, we use standard non-linear solver parameters.


.. code-block:: text

  subsection non-linear solver
    set tolerance               = 1e-4
    set max iterations          = 10
    set verbosity               = verbose
    set solver                  = inexact_newton
  end

Because the assembly of the Nitsche restriction for the immersed boundary is relatively expensive, we reuse the Jacobian matrix as much as possible. This is accomplished by setting ``solver=inexact_newton``.

Linear solver parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Relatively standard parameters are used for the linear solver. From our experience, the AMG preconditioner is more robust with the Nitsche IB than the traditional ILU.

.. code-block:: text

  subsection linear solver
    set method                    = amg
    set max iters                 = 200
    set relative residual         = 1e-3
    set minimum residual          = 1e-7
    set amg preconditioner ilu fill                  = 0
    set amg preconditioner ilu absolute tolerance    = 1e-8
    set amg preconditioner ilu relative tolerance    = 2.00
    set amg aggregation threshold = 1e-10  
    set amg smoother sweeps       = 2      
    set amg smoother overlap      = 1      
    set verbosity                 = verbose
    set max krylov vectors      = 200
  end

Running the simulation
----------------------
Launching the simulation is as simple as specifying the executable name and the parameter file. Assuming that the ``gls_nitsche_navier_stokes_33`` executable is within your path, the simulation can be launched by typing:

.. code-block:: text

  gls_nitsche_navier_stokes_33 mixer.prm

Lethe generates a larger number of files when the Nitsche immersed boundary is used. The ``mixer.pvd`` contains the 3D visualization of the velocity, pressure, and auxiliary variables such as the average velocity. Additional files will also be generated, notably the ``mixer_solid_triangulation_00.pvd`` and ``mixer_solid_particles_00.pvd``, corresponding to the Nitsche IB mesh and the discrete particles inserted at the Gauss points of the solid triangulation, respectively. The solid particles enable the Nitsche restriction visualization, while the solid triangulation is used for animation purposes.

Results
~~~~~~~~~

The following movie shows the evolution of the velocity magnitude as a function of time in a cut perpendicular to the radius of the vessel with and without the mesh :

.. raw:: html

    <iframe width="560" height="315" src="https://youtu.be/rt6PAvgMkio" frameborder="0" allowfullscreen></iframe>

.. raw:: html

   <iframe width="560" height="315" src="https://youtu.be/jvaT76qBBTs" frameborder="0" allowfullscreen></iframe>

Whereas the next one show the evolution of the axial velocity pattern in the same cut:

.. raw:: html

    <iframe width="560" height="315" src="https://youtu.be/8b0ETD8EkQc" frameborder="0" allowfullscreen></iframe>


Finally, the following animation illustrates the axial velocity pattern in an axial cut of the vessel:

.. raw:: html

    <iframe width="560" height="315" src="https://youtu.be/_VUoN8TGsJ4" frameborder="0" allowfullscreen></iframe>


From these animations, we can see that the impeller generates an axial pumping flow. The fluid is diagonally propelled from the blade to the lateral walls and rises along the outer periphery of the vessel before circulating down along the shaft. Although the transient flow patterns are clear, looking at the time-averaged velocity field is also relevant. The following figures show the time-averaged axial velocity in the axial plane:

  .. image:: images/averaged_axial_velocity.png
   :alt: Time-averaged axial velocity
   :align: center
   :name: axial_velocity


Clearly, the fluid is descending along the shaft and rises along the lateral walls of the vessel.
Multiple analyses can be done with this type of simulation. For example, one can monitor the torque on the impeller as a function of the Reynolds number to generate the power curve of the agitator. One could also leverage the tracer multiphysics module to measure the mixing time of the tank and/or identify the presence of dead zones.


Possibilities for extension
----------------------------

- **Increase the Reynolds number:** Using a finer grid, this example can be launched at even higher Reynolds numbers. In the latter case, the flow is significantly more unsteady.

- **Calculate the mixing time using the passive tracer physics:** Using the passive tracer physics and the built-in post-processing tool, the mixing time in the vessel can be easily calculated.


References
----------------------------

[1] Paul, Edward L., Victor A. Atiemo-Obeng, and Suzanne M. Kresta, eds. Handbook of industrial mixing: science and practice. Vol. 1. John Wiley & Sons, 2003.
