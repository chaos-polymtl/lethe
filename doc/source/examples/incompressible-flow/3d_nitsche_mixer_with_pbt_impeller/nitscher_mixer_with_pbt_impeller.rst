===============================================================================
3D Mixer with pitched-blade turbine impeller using Nitsche immersed boundary
===============================================================================

One of the industrial applications which is often simulated with Lethe is mixing in stirred tanks. These agitated vessels are often used in chemical engineering to homogenize products, facilitate heat and mass transfer or to maximise surface area between a catalyst and reactants. They may even be used as a part of a continuous process, in which case we refer to them as CSTR. However, the batch mode of operation is more common in the pharmaceutical and agrofood industries.

This example illustrates how the transient flow in a stirred-tank can be simulated by Lethe using the Nitsche immersed boundary formulation.

Features
----------------------------------
- Solvers: ``gls_nitsche_navier_stokes_33``
- Transient problem
- Rotating complex solid modeled with Nitsche immersed boundary
- Calculation of the average velocity


Location of the examples
------------------------
``/examples/incompressible_flow/3d_nitsche_mixer_with_pbt_impeller/mixer.prm``


Description of the case
-----------------------

We simulate the flow generated by a pitched blade turbine (PBT) in a stirred-tank. The PBT is generally what we refer to as an axial impeller, meaning that it generates flow pattern that tend to amplify axial circulation within the vessel in opposition to radial impellers (e.g. Rushton turbines) [1].

The setup that we wish to simulate is schematized in the following figure:

  .. image:: images/scheme_tank.png
   :alt: The geometry and boundary conditions
   :align: center
   :name: geometry
   :height: 12cm



It consists of a PBT of diameter :math:`D` in a vessel of diameter :math:`T`. The vessel is at a clearance :math:`C` from the bottom. Without loss of generality, we will consider :math:`T=1` and make the problem dimensionless by considering all other dimensions are ratio of :math:`T`. The diameter of the impeller is :math:`D/3` and the clearance is :math:`D/4`. The Reynolds number of the flow will be controlled through the viscosity and the angular velocity of the impeller.

The PBT is rotating at a constant velocity. On the lateral and bottom walls of the vessel, no-slip boundary conditions are applied. On the top surface, a slip boundary condition is applied to mimic liquid's free surface. This choice of boundary condition is debatable, a do-nothing boundary condition could be used, since free surfaces have a constant pressure, but a slip boundary condition is generally significantly more robust numerically.

For this configuration, the Reynolds number is defined as:

  .. math::
    Re = \frac{ND^2}{\nu}

where :math:`N` is the angular velocity in Rotation Per Second (RPS) and :math:`\nu` is the kinematic viscosity. We investigate this case at a Reynolds number of 300 for the flow reaches a pseudo steady-state. However, this example can easily be extend to higher values of the Reynolds number by lowering the kinematic viscosity. It will be necessary to increase the mesh resolution for the solution to be meaningfully accurate.


Parameter file
--------------

All the sections of the parameter file used in this case have been already explained in previous examples with the exception of the Nitsche immersed boundary. However, for the sake of completeness, the important sections are briefly explained.

Simulation control
~~~~~~~~~~~~~~~~~~~

.. code-block:: text

    subsection simulation control
      set method                  = bdf2
      set output name             = mixer
      set output path             = ./output/
      set output frequency        = 2
      set time end                = 5
      set time step               = 0.02
      set output boundaries       = true
    end

Since the flow generated by the agitator is naturally transient, we use a second-order ``bdf2`` time-stepping method. We simulate the flow for a total of 5 seconds. We set ``output boundaries = true`` to generate auxiliary visualisation file that will enable us to visualise the walls of the vessel without the inside cells and  thus facilitate the visualisation of our mixing set-up.

Physical properties
~~~~~~~~~~~~~~~~~~~

.. code-block:: text

  subsection physical properties
    subsection fluid 0
      set kinematic viscosity            = 0.001
    end
  end

The kinematic viscosity is set to :math:`0.001`. This, combined with the angular velocity of 1 RPS and the diameter of the impeller of 0.3, will allow us to simulate the vessel at :math:`Re=300`.


Mesh
~~~~~

The ``mesh`` subsection specifies the computational grid:

.. code-block:: text

  subsection mesh
      set type                 = dealii
      set grid type            = subdivided_cylinder
      set grid arguments       = 2:0.5:0.5
      set initial refinement   = 3
  end

Because we use an immersed boundary approach, we only need to mesh the vessel without considering the impeller. This greatly simplifies the meshing process. The mesh can be generated straightforwardly using the deal.II mesh generator for a subdivided cylinder. We set the half-height and the radius of the vessel to be :math:`0.5`. This will generate a vessel in which the axis of the impeller will be along the :math:`x` coordinate. The bottom of the vessel will be on the :math:`x=-0.5` plane. This is not really intuitive, but this is a consequence of some of the inherent limitations of the mesh generators.


Boundary conditions
~~~~~~~~~~~~~~~~~~~

The ``boundary conditions`` subsection establishes the constraints on different parts of the domain:

.. code-block:: text

    subsection boundary conditions
    set number                  = 3
        subsection bc 0
            set id                = 0
            set type              = noslip
        end
        subsection bc 1
            set id                = 1
            set type              = noslip
        end
        subsection bc 2
            set id                = 2
            set type              = slip
        end
    end


Three different boundary conditions are considered. On the lateral walls (``id=0``) and the bottom wall (``id=1``), a no-slip boundary condition applies whereas a slip boundary condition is imposed on the free surface at the top of the vessel (``id=2``).

Nitsche immersed boundary parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This subsection is used to insert the immersed geometry and control its motion.


.. code-block:: text

  set number of solids = 1
	set verbosity 			 = verbose

  subsection nitsche solid 0
	  subsection mesh
      		set type                 = gmsh
      		set file name            = pbt.msh
          set simplex = true
	  end
    subsection solid velocity
	    set Function expression = 0 ; 1*2*3.1416*z ; -1*2*3.1416*y
    end

   	set beta 			= 10
    set enable particles motion		= true
    set particles sub iterations      = 10
    set calculate torque on solid = true
  end

First we specify the number immersed solid object. In our case, since we only have the PBT, we set ``number of solids=1``.  Setting ``verbosity = true`` enables us to output in the terminal the post-processing done on the solid object.

For each nitsche solid, multiple parameters have to be provided. First,the ``mesh`` subsection works just like a regular ``mesh`` subsection, but instead controls the mesh used for the Nitsche IB. In the present case, we import a GMSH mesh of the PBT made using simplices (tetrahedra). Hence, we set ``simplex = true``.

.. note::
  
  The Nitsche IB method works by forcing the fluid at the location of the gauss points of the solid triangulation in order to apply the no-slip boundary condition within the solid object. Consequently, the solid mesh should have a caracteristic size which is of the same order as that used for the fluid dynamics problem. Using a finer mesh will not cause any problems, but will increase the computational cost without adding any benefits.


We specify the ``solid velocity`` using a used defined function. In the present case, the velocity that we specify induces a rotation around the :math:`x` axis of the meshs, centered at the point :math:`(0,0,0)`. This corresponds to the location of the center of our PBT in the accompanying GMSH mesh.

The ``beta`` parameter controls the intensity of the application of Nitsche method in the fluid region. Setting a higher value of ``beta`` leads to a stiffer problem, but prevents the fluid from penetrating the solid. For flow at Reynolds number larger than one, we have found that setting ``beta`` between 10 and 1000 leads to satisfactory results. When the flow is more viscous, higher values of ``beta`` should be used to compensate for the larger shear stresses acting on the immersed solid.

Nitsche method can be used with both static and dynamic immersed solid. When the velocity imposed on the solid leads to a motion of the solid, we must set ``enable particles motion=true`` . This option should only be set to true on the solids which are actually moving, since it adds a non-negligible cost to the simulations. To ensure that particles are always located efficiently as they move through cell, we set ``particles sub iterations = 10``. This enables us to displace the particle using 10 sub-steps, thus facilitating the detection of the cells in which they lie. Generally, it is a good practice to have sufficient particles sub iterations so as to ensure that particles do not move more than half a cell per particle sub iteration.


Post-processing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When simulating a transient flow, it is often desirable to obtain the time-averaged velocity field. This is achieved through the post-processing section. The averaging period is started after two seconds, a time after which the flow has started to stabilize and reach pseudo steady-state. This is choice is error prone, but increasing the duration of the simulation and, consequently, of the averaging period, can compensate for an ill-chosen initial time for the averaging procedure.

.. code-block:: text

  subsection post-processing
     set calculate average velocities = true
     set initial time = 2
  end

Non-linear solver parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Since the problem that we solve is transient, it is not highly non-linear except for the first few iterations. Thus, we use pretty standard non-linear solver parameters.


.. code-block:: text

  subsection non-linear solver
    set tolerance               = 1e-4
    set max iterations          = 10
    set verbosity               = verbose
    set solver                  = inexact_newton
  end

Because the assembly of the Nitsche restriction for the immersed boundary is relatively expensive, we try to minimize it's assembly by reusing the Jacobian matrix as much as possible. This is accomplished setting ``solver=inexact_newton``.

Linear solver parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Relatively standard parameters are used for the linear solver. In general, experience has shown us that the AMG preconditioner is more robust with the Nitsche IB than the traditional ILU that we use.

.. code-block:: text

  subsection linear solver
    set method                    = amg
    set max iters                 = 200
    set relative residual         = 1e-3
    set minimum residual          = 1e-7
    set amg preconditioner ilu fill                  = 0
    set amg preconditioner ilu absolute tolerance    = 1e-8
    set amg preconditioner ilu relative tolerance    = 2.00
    set amg aggregation threshold = 1e-10  
    set amg smoother sweeps       = 2      
    set amg smoother overlap      = 1      
    set verbosity                 = verbose
    set max krylov vectors      = 200
  end

Running the simulation
----------------------
Launching the simulation is as simple as specifying the executable name and the parameter file. Assuming that the ``gls_nitsche_navier_stokes_33`` executable is within your path, the simulation can be launched by typing:

.. code-block:: text

  gls_nitsche_navier_stokes_33 mixer.prm

Lethe will generate a much larger number of files when the Nitsche immersed boundary is used. The ``mixer.pvd`` file will contain the 3D visualization of the velocity, pressure and other auxiliary variables such as the average velocity. Additional files will also be generated, notably the ``mixer_solid_triangulation_00.pvd`` and ``mixer_solid_particles_00.pvd`` which are respectively the mesh in which the Nitsche IB is applied and the discrete particles which were inserted at the location of the Gauss points of the solid triangulation. The solid particles enable the user to visualize the location at which the Nitsche restriction is applied and the solid triangulation is mainly used for animation purposes.

Results
~~~~~~~~~

The following movie shows the evolution of the velocity magnitude as a function of time in a cut perpendicular to the radius of the vessel with and without the mesh :

.. raw:: html

    <iframe width="560" height="315" src="https://youtu.be/rt6PAvgMkio" frameborder="0" allowfullscreen></iframe>

.. raw:: html

   <iframe width="560" height="315" src="https://youtu.be/jvaT76qBBTs" frameborder="0" allowfullscreen></iframe>

Whereas the next one show the evolution of the axial velocity pattern in the same cut:

.. raw:: html

    <iframe width="560" height="315" src="https://youtu.be/8b0ETD8EkQc" frameborder="0" allowfullscreen></iframe>


Finally, the following animation illustrates the axial velocity pattern in an axial cut of the vessel:

.. raw:: html

    <iframe width="560" height="315" src="https://youtu.be/_VUoN8TGsJ4" frameborder="0" allowfullscreen></iframe>


From these animations, we can clearly see that the impeller generates an axial pumping flow. The fluid is propelled from the blade in diagonal to the lateral walls and rises along the outer periphery of the vessel before circulating down along the shaft. Although the transient flow patterns are quite clear, it is also relevant to look at the time-averaged velocity field. The following figures shows the time-averaged axial velocity in the axial plane:

  .. image:: images/averaged_axial_velocity.png
   :alt: Time-averaged axial velocity
   :align: center
   :name: axial_velocity


There, it is quite apparent that the fluid is descending along the shaft and rises along the lateral walls of the vessel.
Multiple analysis can be done with this type of simulation. For example, one can monitor the torque on the impeller as a function of the Reynolds number to generate the power curve of the agitator. One could also leverage the tracer multiphysics module to measure the mixing time of the tank and/or to identify the presence of dead zones.


Possibilities for extension
----------------------------

- **Investigate at higher Reynolds number:** By using a finer grid, this example can be launched at even higher Reynolds number. In the latter case, the flow generated is significantly more unsteady.

- **Calculate the mixing time using the passive tracer physics:** By using the passive tracer physics and the accompanying post-processing tool, the mixing time in the vessel can be calculated quite easily from this analysis.



