# SPDX-FileCopyrightText: Copyright (c) 2024 The Lethe Authors
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception OR LGPL-2.1-or-later

#############################################################################
"""
Postprocessing code for rising-bubble example

Quick user guide :

This python script allows you to plot the vertical position, vertical speed and contour of the bubble in the rising bubble test case (for VOF or Cahn-Hilliard simulations) and to compare it with results from the literature. If you want to plot the results for different simulations, it does it automatically.

How to use this script?

1- Create a first directory (we will call it outputs but feel free to name it as you like).
2- For each simulation, create a new directory in outputs : output1, output2, output3,...
3- Run the simulations and store the results in their correct directories
4- Execute the script with the path of outputs as argument
5- Enjoy your plots. Each curve will be given the name of the directory containing the data required to plot it. In this example, I will get 3 curves. with names output1, output2 and output3.
"""
#############################################################################

'''Importing Libraries'''
import numpy as np
import sys
import matplotlib.pyplot as plt
import pyvista as pv
import os
import scienceplots
#############################################################################

rootdir =sys.argv[1]

filename_list = []
t_list=[]
x_list=[]
y_list=[]
vx_list=[]
vy_list=[]
root, dirs, files = next(os.walk(rootdir, topdown=True))

for dir in dirs:
    for filename in os.listdir(root + "/" + dir):
        if filename.endswith('n.dat'):
            filename_list.append(root + "/" + dir + "/" + filename)


#For controlling font sized globally
SMALL_SIZE = 10
MEDIUM_SIZE = 9.5
BIGGER_SIZE = 15

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title


colors = {
    'blue':    '#377eb8', 
    'orange':  '#ff7f00',
    'green':   '#4daf4a',
    'pink':    '#f781bf',
    'brown':   '#a65628',
    'purple':  '#984ea3',
    'gray':    '#999999',
    'red':     '#e41a1c',
    'yellow':  '#dede00'
} 

#Data from Zahedi, Kronbichler and Kreiss (2012)
x_ref_ZKR = [0.047, 0.139, 0.232 ,0.324 ,0.416 ,0.508 ,0.601 ,0.693 ,0.785 ,0.878 ,0.97 ,1.062 ,1.154 ,1.247 ,1.339 ,1.431 ,1.524 ,1.616 ,1.708 ,1.8 ,1.893 ,1.985 ,2.077 ,2.17 ,2.262 ,2.354 ,2.446 ,2.539 ,2.631 ,2.723 ,2.816 ,2.908 ,2.979]
y_ref_ZKR = [0.501 ,0.505 ,0.513 ,0.525 ,0.54 ,0.557 ,0.576 ,0.597 ,0.618 ,0.641 ,0.663 ,0.685 ,0.707 ,0.729 ,0.75 ,0.77 ,0.791 ,0.811 ,0.83 ,0.849 ,0.868 ,0.886 ,0.904 ,0.922 ,0.94 ,0.958 ,0.976 ,0.993 ,1.011 ,1.029 ,1.047 ,1.064 ,1.078]
x_vel_ZKR = [0.001 ,0.03 ,0.056 ,0.081 ,0.106 ,0.136 ,0.17 ,0.203 ,0.237 ,0.271 ,0.304 ,0.338 ,0.372 ,0.41 ,0.452 ,0.494 ,0.544 ,0.607 ,0.687 ,0.779 ,0.872 ,0.964 ,1.056 ,1.149 ,1.241 ,1.333 ,1.426 ,1.518 ,1.61 ,1.702 ,1.795 ,1.887 ,1.979 ,2.072 ,2.164 ,2.256 ,2.348 ,2.441 ,2.533 ,2.625 ,2.718 ,2.81 ,2.902 ,2.978]
y_vel_ZKR = [0.004 ,0.017 ,0.029 ,0.041 ,0.053 ,0.066 ,0.081 ,0.095 ,0.109 ,0.122 ,0.135 ,0.147 ,0.158 ,0.17 ,0.182 ,0.194 ,0.205 ,0.218 ,0.229 ,0.237 ,0.24 ,0.241 ,0.239 ,0.236 ,0.231 ,0.227 ,0.222 ,0.217 ,0.213 ,0.208 ,0.205 ,0.201 ,0.198 ,0.196 ,0.194 ,0.192 ,0.192 ,0.191 ,0.191 ,0.192 ,0.192 ,0.193 ,0.193 ,0.194]

#Data Hysing, S., Turek, S., Kuzmin, D., Parolini, N., Burman, E., Ganesan, S., & Tobiska, L. (2009). Quantitative benchmark computations of two‚Äêdimensional bubble dynamics. International Journal for Numerical Methods in Fluids, 60(11), 1259-1288.
x_ref_H = [0.24476 , 0.49894 , 0.75132 , 0.99538 , 1.2466  , 1.49797 , 1.75014 , 1.99467 , 2.24561 , 2.49821 ,2.74912 ]
y_ref_H = [0.514646, 0.554469, 0.608872, 0.670196, 0.728744, 0.785978, 0.838403, 0.888369, 0.936482, 0.984353, 1.032372]
x_vel_H = [0.24535, 0.49537, 0.74679   ,0.99191   ,1.2424,   1.49542   ,1.74728   ,1.99275   ,2.24447   ,2.49706,   2.74796]
y_vel_H = [0.114461, 0.196094, 0.23631, 0.241153, 0.231292, 0.218334, 0.206795, 0.197974, 0.193075, 0.191356, 0.192096]

#Data ref for contour

x_contour_ref = [0.15772151898734177, 0.15772151898734177, 0.15873417721518987, 0.159746835443038, 0.1607594936708861, 0.1627848101265823, 0.16379746835443038, 0.1668354430379747, 0.16987341772151895, 0.17291139240506326, 0.1749367088607595, 0.1779746835443038, 0.1820253164556962, 0.18607594936708866, 0.18911392405063296, 0.19215189873417726, 0.1962025316455696, 0.20126582278481014, 0.20430379746835445, 0.20936708860759493, 0.21341772151898739, 0.219493670886076, 0.22354430379746834, 0.22759493670886072, 0.23265822784810125, 0.2377215189873418, 0.2427848101265823, 0.24784810126582282, 0.25189873417721526, 0.25797468354430386, 0.2630379746835443, 0.270126582278481, 0.2751898734177215, 0.28025316455696203, 0.28430379746835444, 0.28936708860759497, 0.2944303797468355, 0.3005063291139241, 0.3065822784810127, 0.3116455696202532, 0.3177215189873417, 0.3248101265822785, 0.3308860759493671, 0.3379746835443038, 0.3440506329113925, 0.35113924050632916, 0.359240506329114, 0.3683544303797468, 0.3754430379746835, 0.38151898734177214, 0.38962025316455695, 0.3987341772151899, 0.4068354430379747, 0.4139240506329115, 0.4220253164556962, 0.42911392405063287, 0.4372151898734177, 0.4422784810126583, 0.4493670886075949, 0.4564556962025317, 0.4645569620253165, 0.47164556962025317, 0.47873417721518985, 0.4848101265822785, 0.4929113924050633, 0.49797468354430374, 0.5030379746835444, 0.5101265822784811, 0.5162025316455696, 0.5232911392405063, 0.5313924050632911, 0.5384810126582278, 0.5435443037974683, 0.5506329113924051, 0.5567088607594937, 0.5637974683544305, 0.5698734177215191, 0.5769620253164557, 0.5830379746835443, 0.590126582278481, 0.5972151898734177, 0.6043037974683545, 0.6113924050632912, 0.6144303797468355, 0.6235443037974683, 0.630632911392405, 0.6387341772151898, 0.6458227848101266, 0.6529113924050634, 0.6599999999999999, 0.6670886075949367, 0.6731645569620254, 0.6792405063291138, 0.6832911392405063, 0.6903797468354429, 0.6974683544303797, 0.7025316455696202, 0.7075949367088608, 0.7136708860759494, 0.7207594936708862, 0.7268354430379748, 0.7339240506329114, 0.7400000000000001, 0.7450632911392406, 0.7521518987341773, 0.7592405063291138, 0.7663291139240506, 0.7724050632911392, 0.7784810126582278, 0.7845569620253164, 0.7906329113924051, 0.7956962025316455, 0.8017721518987342, 0.8058227848101265, 0.8088607594936709, 0.8129113924050633, 0.8179746835443037, 0.8240506329113924, 0.8270886075949367, 0.830126582278481, 0.8321518987341773, 0.8362025316455696, 0.8392405063291141, 0.8402531645569622, 0.8422784810126582, 0.8443037974683545, 0.8443037974683545, 0.8453164556962026, 0.8443037974683545, 0.8412658227848103, 0.8392405063291141, 0.8362025316455696, 0.8321518987341773, 0.8291139240506331, 0.8250632911392405, 0.8189873417721518, 0.8139240506329114, 0.8068354430379746, 0.8027848101265823, 0.7946835443037974, 0.7875949367088607, 0.7815189873417722, 0.7724050632911392, 0.7632911392405063, 0.7541772151898734, 0.7460759493670887, 0.7359493670886077, 0.7268354430379748, 0.7167088607594937, 0.7055696202531645, 0.6994936708860758, 0.6913924050632911, 0.6832911392405063, 0.6751898734177214, 0.6681012658227848, 0.6610126582278482, 0.6559493670886076, 0.6478481012658227, 0.6387341772151898, 0.630632911392405, 0.6235443037974683, 0.6154430379746836, 0.6073417721518988, 0.600253164556962, 0.5941772151898734, 0.5860759493670886, 0.5779746835443037, 0.5678481012658227, 0.5607594936708862, 0.549620253164557, 0.5384810126582278, 0.5253164556962024, 0.5151898734177216, 0.5313924050632911, 0.5081012658227848, 0.5010126582278481, 0.4929113924050633, 0.4848101265822785, 0.47873417721518985, 0.4726582278481013, 0.46658227848101275, 0.4574683544303798, 0.45139240506329126, 0.44329113924050634, 0.43518987341772153, 0.4270886075949367, 0.4179746835443038, 0.4108860759493672, 0.4027848101265823, 0.3987341772151899, 0.39367088607594936, 0.38962025316455695, 0.3835443037974684, 0.3713924050632912, 0.36126582278481023, 0.37746835443037974, 0.35417721518987344, 0.3491139240506329, 0.34303797468354436, 0.3379746835443038, 0.3308860759493671, 0.3258227848101266, 0.319746835443038, 0.30759493670886084, 0.3136708860759494, 0.2994936708860759, 0.29139240506329117, 0.28531645569620256, 0.2792405063291139, 0.2711392405063291, 0.26607594936708856, 0.258987341772152, 0.2549367088607596, 0.25189873417721526, 0.2427848101265823, 0.23569620253164558, 0.23063291139240505, 0.22354430379746834, 0.219493670886076, 0.2164556962025317, 0.20835443037974682, 0.20126582278481014, 0.1962025316455696, 0.19316455696202534, 0.1881012658227848, 0.1820253164556962, 0.17696202531645572, 0.17189873417721518, 0.1668354430379747, 0.16481012658227848, 0.16177215189873417, 0.159746835443038, 0.15772151898734177, 0.15772151898734177]

y_contour_ref = [1.0266441821247891, 1.0347386172006745, 1.0408094435075885, 1.047892074198988, 1.0529510961214166, 1.0590219224283306, 1.0650927487352444, 1.0711635750421584, 1.0762225969645869, 1.082293423271501, 1.0893760539629005, 1.0954468802698145, 1.1005059021922428, 1.1065767284991568, 1.1126475548060708, 1.117706576728499, 1.1227655986509275, 1.1278246205733558, 1.1338954468802698, 1.1379426644182125, 1.1440134907251265, 1.1490725126475547, 1.154131534569983, 1.160202360876897, 1.1652613827993255, 1.1703204047217537, 1.1753794266441822, 1.1794266441821246, 1.184485666104553, 1.1885328836424958, 1.193591905564924, 1.1986509274873525, 1.2026981450252952, 1.2067453625632378, 1.2097807757166947, 1.2138279932546374, 1.21787521079258, 1.2219224283305228, 1.2249578414839797, 1.2290050590219224, 1.233052276559865, 1.2370994940978077, 1.2401349072512646, 1.2441821247892073, 1.24822934232715, 1.2512647554806071, 1.2553119730185496, 1.2583473861720067, 1.2593591905564923, 1.2644182124789207, 1.2674536256323776, 1.269477234401349, 1.2704890387858347, 1.275548060708263, 1.275548060708263, 1.2775716694772343, 1.2785834738617199, 1.2785834738617199, 1.2826306913996626, 1.2826306913996626, 1.2826306913996626, 1.2836424957841484, 1.2826306913996626, 1.284654300168634, 1.284654300168634, 1.284654300168634, 1.2856661045531197, 1.284654300168634, 1.2836424957841484, 1.2826306913996626, 1.281618887015177, 1.2826306913996626, 1.281618887015177, 1.281618887015177, 1.2785834738617199, 1.2785834738617199, 1.2775716694772343, 1.275548060708263, 1.2745362563237772, 1.2715008431703203, 1.2704890387858347, 1.2674536256323776, 1.266441821247892, 1.2644182124789207, 1.2623946037099494, 1.2593591905564923, 1.2553119730185496, 1.2532883642495785, 1.2492411467116358, 1.245193929173693, 1.2411467116357504, 1.2381112984822933, 1.2350758853288364, 1.2310286677908937, 1.2279932546374366, 1.2229342327150083, 1.2188870151770657, 1.214839797639123, 1.2107925801011805, 1.2067453625632378, 1.2026981450252952, 1.196627318718381, 1.1915682967959527, 1.1865092748735244, 1.1804384485666104, 1.1753794266441822, 1.1682967959527826, 1.1622259696458683, 1.1551433389544687, 1.1470489038785834, 1.1419898819561551, 1.1349072512647553, 1.1288364249578415, 1.1217537942664417, 1.1156829679595277, 1.1086003372681281, 1.102529510961214, 1.094435075885329, 1.0883642495784147, 1.082293423271501, 1.0721753794266442, 1.0661045531197302, 1.0600337268128162, 1.0519392917369308, 1.0428330522765599, 1.0347386172006745, 1.0286677908937605, 1.0205733558178751, 1.0145025295109613, 1.0053962900505902, 0.9993254637436763, 0.9922428330522766, 0.9851602023608769, 0.9801011804384485, 0.9740303541315346, 0.9699831365935918, 0.9649241146711636, 0.9598650927487353, 0.9558178752107926, 0.9537942664418213, 0.9487352445193928, 0.9467116357504216, 0.9436762225969646, 0.9396290050590218, 0.9365935919055649, 0.9345699831365937, 0.9315345699831366, 0.930522765598651, 0.9295109612141653, 0.9254637436762226, 0.9254637436762226, 0.924451939291737, 0.9224283305227655, 0.9224283305227655, 0.92141652613828, 0.92141652613828, 0.9183811129848228, 0.9183811129848228, 0.9183811129848228, 0.9183811129848228, 0.9173693086003374, 0.9153456998313659, 0.9143338954468803, 0.9143338954468803, 0.9143338954468803, 0.9153456998313659, 0.9143338954468803, 0.9143338954468803, 0.9143338954468803, 0.9143338954468803, 0.9133220910623947, 0.9133220910623947, 0.9133220910623947, 0.9133220910623947, 0.9133220910623947, 0.9133220910623947, 0.9133220910623947, 0.9133220910623947, 0.9133220910623947, 0.9133220910623947, 0.9133220910623947, 0.9133220910623947, 0.9133220910623947, 0.9133220910623947, 0.9143338954468803, 0.9143338954468803, 0.9143338954468803, 0.9143338954468803, 0.9143338954468803, 0.9163575042158516, 0.9173693086003374, 0.9173693086003374, 0.9173693086003374, 0.9173693086003374, 0.9173693086003374, 0.9173693086003374, 0.9173693086003374, 0.9173693086003374, 0.9183811129848228, 0.92141652613828, 0.92141652613828, 0.92141652613828, 0.92141652613828, 0.924451939291737, 0.9234401349072513, 0.9254637436762226, 0.924451939291737, 0.9284991568296797, 0.9284991568296797, 0.9295109612141653, 0.9325463743676223, 0.9335581787521079, 0.9335581787521079, 0.9355817875210792, 0.9386172006745364, 0.9396290050590218, 0.9416526138279933, 0.9436762225969646, 0.9477234401349073, 0.9477234401349073, 0.9507588532883643, 0.9558178752107926, 0.9588532883642495, 0.9618887015177066, 0.9649241146711636, 0.9689713322091063, 0.9740303541315346, 0.9811129848229343, 0.9881956155143339, 0.9942664418212479, 1.0023608768971333, 1.0094435075885329, 1.0165261382799324, 1.0205733558178751]

# Define legend entries
pparam0 = dict(xlabel=r'$t [-]$', ylabel=r'Bubble barycenter height [-]')
pparam1 = dict(xlabel=r'$t [-]$', ylabel=r'Rise velocity [-]')
pparam3 = dict(xlabel=r'$x [-]$', ylabel=r'y [-]')

# Read the .dat files to extract relevant data for each sub-directory in the main directory : time list, barycenter coordinates list for each time step, barycenter velocity list for each timestep
for i in range(len(filename_list)):
    t, x, y, vx, vy = np.loadtxt(filename_list[i], skiprows=1, unpack=True)
    t_list.append(t)
    x_list.append(x)
    y_list.append(y)
    vx_list.append(vx)
    vy_list.append(vy)
    
    
# Syntax specific to the SciencePlots module 
with plt.style.context(['science', 'ieee']):
   fig0 = plt.figure()
   ax0 = fig0.add_subplot(111)
   
   # This loops plots the barycenter coordinates for each subdirectory of the main directory
   for i in range(len(filename_list)):
      label_loop = dirs[i]
      ax0.plot(t_list[i], y_list[i], lw=1, label=label_loop)
      
   # Plot the reference barycenter coordinates
   ax0.plot(x_ref_ZKR, y_ref_ZKR, '+',markersize = 3,label="Zahedi et al. (2012)")
   ax0.plot(x_ref_H, y_ref_H, 'x',markersize = 3,alpha=0.8,label="Hysing et al. (2009)")
   
   # Legend settings
   ax0.set(**pparam0)
   ax0.grid( which='major', color='silver', linestyle='--')
   fig0.legend(loc='outside center right',frameon = True,edgecolor='k',prop={'size': MEDIUM_SIZE},ncol=1, fancybox=False, bbox_to_anchor=(1.4, 0.5))
   y_ticks = [0.5, 0.6, 0.8,1.0, 1.2]
   ax0.set_yticks(y_ticks)
   ax0.set_xlim([0,3])
   ax0.set_ylim([0.5,1.2])
   
   # Save figures
   fig0.savefig(f'./bubble-barycenter.pdf',format="pdf",dpi=500)
   fig0.savefig(f'./bubble-barycenter.png',format="png",dpi=500)

# Syntax specific to the SciencePlots module 
with plt.style.context(['science', 'ieee']):
   fig1 = plt.figure()
   ax1 = fig1.add_subplot(111)
   # This loops plots the barycenter velocities for each subdirectory of the main directory
   for i in range(len(filename_list)):
      label_loop = dirs[i]
      ax1.plot(t_list[i], vy_list[i], lw=1, label=label_loop)
   # Plot the reference barycenter velocities
   ax1.plot(x_vel_ZKR, y_vel_ZKR, '+',markersize = 3,label="Zahedi et al. (2012)")
   ax1.plot(x_vel_H, y_vel_H, '*',markersize = 3,alpha=0.8,label="Hysing et al. (2009)")
   
   # Legend settings
   ax1.set(**pparam1)
   ax1.grid(which='major', color='silver', linestyle='--')
   ax1.legend(loc="lower right",frameon = True,edgecolor='k',prop={'size': MEDIUM_SIZE},fancybox=False,framealpha=1)
   ax1.set_xlim([0,3])
   ax1.set_ylim([0,0.25])
   fig1.savefig(f'./bubble-rise-velocity.pdf',format="pdf",dpi=500)
   fig1.savefig(f'./bubble-rise-velocity.png',format="png",dpi=500)

# Make the plot of the contour of the bubble
list_latest_files=[]
for dir in dirs:
    list_vtu = os.listdir(root + "/" + dir + "/")
    list_vtu = [root + "/" + dir + "/" + x for x in list_vtu if(x.endswith('.vtu')) ]
    list_vtu = np.sort(list_vtu)
    list_latest_files.append(list_vtu[-1])

# Syntax specific to the SciencePlots module 
with plt.style.context(['science', 'ieee']):

   fig3 = plt.figure()
   ax3 = fig3.add_subplot(111)

   for i in range(len(dirs)):
      sim = pv.read(list_latest_files[i])
      # If VOF simulation results are in the main subdirectory, the script is able to output the contour of the bubble nonetheless.
      # The VOF subdirectories should have VOF somewhere in their name
      if ("VOF" in list_latest_files[i]):
          sim.set_active_scalars("filtered_phase")
          contour_val = np.array([0.5])
          contours = sim.contour(contour_val)
          x, y = contours.points[:, 0], contours.points[:, 1]
          label_loop = dirs[i]
          ax3.scatter(x, y, s=1, marker=",",color='k',label=label_loop)

      # Plot the contour of the bubble	
      else:
          sim.set_active_scalars("phase_order")
          contour_val = np.array([0.0])
          contours = sim.contour(contour_val)
          x, y = contours.points[:, 0], contours.points[:, 1]
          label_loop = dirs[i]
          ax3.scatter(x, y, s=1, marker=".",color='r',label=label_loop)

   # Plot the reference contour of the bubble.
   ax3.scatter(x_contour_ref, y_contour_ref,alpha=0.8, s=1,marker="*", color='b',label="Zahedi et al. (2012)")
   ax3.grid( which='major', color='silver', linestyle='--')
   ax3.set_xlim([0.1,0.9])
   ax3.set_ylim([0.8,1.4])
   ax3.set(**pparam3)
   fig3.legend(loc='outside center right',frameon = True,edgecolor='k',prop={'size': MEDIUM_SIZE},ncol=1, fancybox=False, bbox_to_anchor=(1.4, 0.5))
   
   # Save figures
   fig3.savefig("bubble-contour.pdf",format="pdf",dpi=500)
   fig3.savefig("bubble-contour.png",format="png",dpi=500)

